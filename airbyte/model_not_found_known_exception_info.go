/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte

import (
	"encoding/json"
)

// NotFoundKnownExceptionInfo struct for NotFoundKnownExceptionInfo
type NotFoundKnownExceptionInfo struct {
	Id *string `json:"id,omitempty"`
	Message string `json:"message"`
	ExceptionClassName *string `json:"exceptionClassName,omitempty"`
	ExceptionStack []string `json:"exceptionStack,omitempty"`
	RootCauseExceptionClassName *string `json:"rootCauseExceptionClassName,omitempty"`
	RootCauseExceptionStack []string `json:"rootCauseExceptionStack,omitempty"`
}

// NewNotFoundKnownExceptionInfo instantiates a new NotFoundKnownExceptionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotFoundKnownExceptionInfo(message string) *NotFoundKnownExceptionInfo {
	this := NotFoundKnownExceptionInfo{}
	this.Message = message
	return &this
}

// NewNotFoundKnownExceptionInfoWithDefaults instantiates a new NotFoundKnownExceptionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotFoundKnownExceptionInfoWithDefaults() *NotFoundKnownExceptionInfo {
	this := NotFoundKnownExceptionInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NotFoundKnownExceptionInfo) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotFoundKnownExceptionInfo) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NotFoundKnownExceptionInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NotFoundKnownExceptionInfo) SetId(v string) {
	o.Id = &v
}

// GetMessage returns the Message field value
func (o *NotFoundKnownExceptionInfo) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *NotFoundKnownExceptionInfo) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *NotFoundKnownExceptionInfo) SetMessage(v string) {
	o.Message = v
}

// GetExceptionClassName returns the ExceptionClassName field value if set, zero value otherwise.
func (o *NotFoundKnownExceptionInfo) GetExceptionClassName() string {
	if o == nil || o.ExceptionClassName == nil {
		var ret string
		return ret
	}
	return *o.ExceptionClassName
}

// GetExceptionClassNameOk returns a tuple with the ExceptionClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotFoundKnownExceptionInfo) GetExceptionClassNameOk() (*string, bool) {
	if o == nil || o.ExceptionClassName == nil {
		return nil, false
	}
	return o.ExceptionClassName, true
}

// HasExceptionClassName returns a boolean if a field has been set.
func (o *NotFoundKnownExceptionInfo) HasExceptionClassName() bool {
	if o != nil && o.ExceptionClassName != nil {
		return true
	}

	return false
}

// SetExceptionClassName gets a reference to the given string and assigns it to the ExceptionClassName field.
func (o *NotFoundKnownExceptionInfo) SetExceptionClassName(v string) {
	o.ExceptionClassName = &v
}

// GetExceptionStack returns the ExceptionStack field value if set, zero value otherwise.
func (o *NotFoundKnownExceptionInfo) GetExceptionStack() []string {
	if o == nil || o.ExceptionStack == nil {
		var ret []string
		return ret
	}
	return o.ExceptionStack
}

// GetExceptionStackOk returns a tuple with the ExceptionStack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotFoundKnownExceptionInfo) GetExceptionStackOk() ([]string, bool) {
	if o == nil || o.ExceptionStack == nil {
		return nil, false
	}
	return o.ExceptionStack, true
}

// HasExceptionStack returns a boolean if a field has been set.
func (o *NotFoundKnownExceptionInfo) HasExceptionStack() bool {
	if o != nil && o.ExceptionStack != nil {
		return true
	}

	return false
}

// SetExceptionStack gets a reference to the given []string and assigns it to the ExceptionStack field.
func (o *NotFoundKnownExceptionInfo) SetExceptionStack(v []string) {
	o.ExceptionStack = v
}

// GetRootCauseExceptionClassName returns the RootCauseExceptionClassName field value if set, zero value otherwise.
func (o *NotFoundKnownExceptionInfo) GetRootCauseExceptionClassName() string {
	if o == nil || o.RootCauseExceptionClassName == nil {
		var ret string
		return ret
	}
	return *o.RootCauseExceptionClassName
}

// GetRootCauseExceptionClassNameOk returns a tuple with the RootCauseExceptionClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotFoundKnownExceptionInfo) GetRootCauseExceptionClassNameOk() (*string, bool) {
	if o == nil || o.RootCauseExceptionClassName == nil {
		return nil, false
	}
	return o.RootCauseExceptionClassName, true
}

// HasRootCauseExceptionClassName returns a boolean if a field has been set.
func (o *NotFoundKnownExceptionInfo) HasRootCauseExceptionClassName() bool {
	if o != nil && o.RootCauseExceptionClassName != nil {
		return true
	}

	return false
}

// SetRootCauseExceptionClassName gets a reference to the given string and assigns it to the RootCauseExceptionClassName field.
func (o *NotFoundKnownExceptionInfo) SetRootCauseExceptionClassName(v string) {
	o.RootCauseExceptionClassName = &v
}

// GetRootCauseExceptionStack returns the RootCauseExceptionStack field value if set, zero value otherwise.
func (o *NotFoundKnownExceptionInfo) GetRootCauseExceptionStack() []string {
	if o == nil || o.RootCauseExceptionStack == nil {
		var ret []string
		return ret
	}
	return o.RootCauseExceptionStack
}

// GetRootCauseExceptionStackOk returns a tuple with the RootCauseExceptionStack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotFoundKnownExceptionInfo) GetRootCauseExceptionStackOk() ([]string, bool) {
	if o == nil || o.RootCauseExceptionStack == nil {
		return nil, false
	}
	return o.RootCauseExceptionStack, true
}

// HasRootCauseExceptionStack returns a boolean if a field has been set.
func (o *NotFoundKnownExceptionInfo) HasRootCauseExceptionStack() bool {
	if o != nil && o.RootCauseExceptionStack != nil {
		return true
	}

	return false
}

// SetRootCauseExceptionStack gets a reference to the given []string and assigns it to the RootCauseExceptionStack field.
func (o *NotFoundKnownExceptionInfo) SetRootCauseExceptionStack(v []string) {
	o.RootCauseExceptionStack = v
}

func (o NotFoundKnownExceptionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if o.ExceptionClassName != nil {
		toSerialize["exceptionClassName"] = o.ExceptionClassName
	}
	if o.ExceptionStack != nil {
		toSerialize["exceptionStack"] = o.ExceptionStack
	}
	if o.RootCauseExceptionClassName != nil {
		toSerialize["rootCauseExceptionClassName"] = o.RootCauseExceptionClassName
	}
	if o.RootCauseExceptionStack != nil {
		toSerialize["rootCauseExceptionStack"] = o.RootCauseExceptionStack
	}
	return json.Marshal(toSerialize)
}

type NullableNotFoundKnownExceptionInfo struct {
	value *NotFoundKnownExceptionInfo
	isSet bool
}

func (v NullableNotFoundKnownExceptionInfo) Get() *NotFoundKnownExceptionInfo {
	return v.value
}

func (v *NullableNotFoundKnownExceptionInfo) Set(val *NotFoundKnownExceptionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNotFoundKnownExceptionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNotFoundKnownExceptionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotFoundKnownExceptionInfo(val *NotFoundKnownExceptionInfo) *NullableNotFoundKnownExceptionInfo {
	return &NullableNotFoundKnownExceptionInfo{value: val, isSet: true}
}

func (v NullableNotFoundKnownExceptionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotFoundKnownExceptionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


