/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte

import (
	"encoding/json"
)

// DestinationSearch struct for DestinationSearch
type DestinationSearch struct {
	DestinationDefinitionId *string `json:"destinationDefinitionId,omitempty"`
	DestinationId *string `json:"destinationId,omitempty"`
	WorkspaceId *string `json:"workspaceId,omitempty"`
	// The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.
	ConnectionConfiguration interface{} `json:"connectionConfiguration,omitempty"`
	Name *string `json:"name,omitempty"`
	DestinationName *string `json:"destinationName,omitempty"`
}

// NewDestinationSearch instantiates a new DestinationSearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationSearch() *DestinationSearch {
	this := DestinationSearch{}
	return &this
}

// NewDestinationSearchWithDefaults instantiates a new DestinationSearch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationSearchWithDefaults() *DestinationSearch {
	this := DestinationSearch{}
	return &this
}

// GetDestinationDefinitionId returns the DestinationDefinitionId field value if set, zero value otherwise.
func (o *DestinationSearch) GetDestinationDefinitionId() string {
	if o == nil || o.DestinationDefinitionId == nil {
		var ret string
		return ret
	}
	return *o.DestinationDefinitionId
}

// GetDestinationDefinitionIdOk returns a tuple with the DestinationDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationSearch) GetDestinationDefinitionIdOk() (*string, bool) {
	if o == nil || o.DestinationDefinitionId == nil {
		return nil, false
	}
	return o.DestinationDefinitionId, true
}

// HasDestinationDefinitionId returns a boolean if a field has been set.
func (o *DestinationSearch) HasDestinationDefinitionId() bool {
	if o != nil && o.DestinationDefinitionId != nil {
		return true
	}

	return false
}

// SetDestinationDefinitionId gets a reference to the given string and assigns it to the DestinationDefinitionId field.
func (o *DestinationSearch) SetDestinationDefinitionId(v string) {
	o.DestinationDefinitionId = &v
}

// GetDestinationId returns the DestinationId field value if set, zero value otherwise.
func (o *DestinationSearch) GetDestinationId() string {
	if o == nil || o.DestinationId == nil {
		var ret string
		return ret
	}
	return *o.DestinationId
}

// GetDestinationIdOk returns a tuple with the DestinationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationSearch) GetDestinationIdOk() (*string, bool) {
	if o == nil || o.DestinationId == nil {
		return nil, false
	}
	return o.DestinationId, true
}

// HasDestinationId returns a boolean if a field has been set.
func (o *DestinationSearch) HasDestinationId() bool {
	if o != nil && o.DestinationId != nil {
		return true
	}

	return false
}

// SetDestinationId gets a reference to the given string and assigns it to the DestinationId field.
func (o *DestinationSearch) SetDestinationId(v string) {
	o.DestinationId = &v
}

// GetWorkspaceId returns the WorkspaceId field value if set, zero value otherwise.
func (o *DestinationSearch) GetWorkspaceId() string {
	if o == nil || o.WorkspaceId == nil {
		var ret string
		return ret
	}
	return *o.WorkspaceId
}

// GetWorkspaceIdOk returns a tuple with the WorkspaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationSearch) GetWorkspaceIdOk() (*string, bool) {
	if o == nil || o.WorkspaceId == nil {
		return nil, false
	}
	return o.WorkspaceId, true
}

// HasWorkspaceId returns a boolean if a field has been set.
func (o *DestinationSearch) HasWorkspaceId() bool {
	if o != nil && o.WorkspaceId != nil {
		return true
	}

	return false
}

// SetWorkspaceId gets a reference to the given string and assigns it to the WorkspaceId field.
func (o *DestinationSearch) SetWorkspaceId(v string) {
	o.WorkspaceId = &v
}

// GetConnectionConfiguration returns the ConnectionConfiguration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DestinationSearch) GetConnectionConfiguration() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.ConnectionConfiguration
}

// GetConnectionConfigurationOk returns a tuple with the ConnectionConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DestinationSearch) GetConnectionConfigurationOk() (*interface{}, bool) {
	if o == nil || o.ConnectionConfiguration == nil {
		return nil, false
	}
	return &o.ConnectionConfiguration, true
}

// HasConnectionConfiguration returns a boolean if a field has been set.
func (o *DestinationSearch) HasConnectionConfiguration() bool {
	if o != nil && o.ConnectionConfiguration != nil {
		return true
	}

	return false
}

// SetConnectionConfiguration gets a reference to the given interface{} and assigns it to the ConnectionConfiguration field.
func (o *DestinationSearch) SetConnectionConfiguration(v interface{}) {
	o.ConnectionConfiguration = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DestinationSearch) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationSearch) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DestinationSearch) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DestinationSearch) SetName(v string) {
	o.Name = &v
}

// GetDestinationName returns the DestinationName field value if set, zero value otherwise.
func (o *DestinationSearch) GetDestinationName() string {
	if o == nil || o.DestinationName == nil {
		var ret string
		return ret
	}
	return *o.DestinationName
}

// GetDestinationNameOk returns a tuple with the DestinationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationSearch) GetDestinationNameOk() (*string, bool) {
	if o == nil || o.DestinationName == nil {
		return nil, false
	}
	return o.DestinationName, true
}

// HasDestinationName returns a boolean if a field has been set.
func (o *DestinationSearch) HasDestinationName() bool {
	if o != nil && o.DestinationName != nil {
		return true
	}

	return false
}

// SetDestinationName gets a reference to the given string and assigns it to the DestinationName field.
func (o *DestinationSearch) SetDestinationName(v string) {
	o.DestinationName = &v
}

func (o DestinationSearch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DestinationDefinitionId != nil {
		toSerialize["destinationDefinitionId"] = o.DestinationDefinitionId
	}
	if o.DestinationId != nil {
		toSerialize["destinationId"] = o.DestinationId
	}
	if o.WorkspaceId != nil {
		toSerialize["workspaceId"] = o.WorkspaceId
	}
	if o.ConnectionConfiguration != nil {
		toSerialize["connectionConfiguration"] = o.ConnectionConfiguration
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.DestinationName != nil {
		toSerialize["destinationName"] = o.DestinationName
	}
	return json.Marshal(toSerialize)
}

type NullableDestinationSearch struct {
	value *DestinationSearch
	isSet bool
}

func (v NullableDestinationSearch) Get() *DestinationSearch {
	return v.value
}

func (v *NullableDestinationSearch) Set(val *DestinationSearch) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationSearch(val *DestinationSearch) *NullableDestinationSearch {
	return &NullableDestinationSearch{value: val, isSet: true}
}

func (v NullableDestinationSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


