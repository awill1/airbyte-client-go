/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte

import (
	"encoding/json"
)

// Notification struct for Notification
type Notification struct {
	NotificationType NotificationType `json:"notificationType"`
	SendOnSuccess bool `json:"sendOnSuccess"`
	SendOnFailure bool `json:"sendOnFailure"`
	SlackConfiguration *SlackNotificationConfiguration `json:"slackConfiguration,omitempty"`
}

// NewNotification instantiates a new Notification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotification(notificationType NotificationType, sendOnSuccess bool, sendOnFailure bool) *Notification {
	this := Notification{}
	this.NotificationType = notificationType
	this.SendOnSuccess = sendOnSuccess
	this.SendOnFailure = sendOnFailure
	return &this
}

// NewNotificationWithDefaults instantiates a new Notification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationWithDefaults() *Notification {
	this := Notification{}
	var sendOnSuccess bool = false
	this.SendOnSuccess = sendOnSuccess
	var sendOnFailure bool = true
	this.SendOnFailure = sendOnFailure
	return &this
}

// GetNotificationType returns the NotificationType field value
func (o *Notification) GetNotificationType() NotificationType {
	if o == nil {
		var ret NotificationType
		return ret
	}

	return o.NotificationType
}

// GetNotificationTypeOk returns a tuple with the NotificationType field value
// and a boolean to check if the value has been set.
func (o *Notification) GetNotificationTypeOk() (*NotificationType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NotificationType, true
}

// SetNotificationType sets field value
func (o *Notification) SetNotificationType(v NotificationType) {
	o.NotificationType = v
}

// GetSendOnSuccess returns the SendOnSuccess field value
func (o *Notification) GetSendOnSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SendOnSuccess
}

// GetSendOnSuccessOk returns a tuple with the SendOnSuccess field value
// and a boolean to check if the value has been set.
func (o *Notification) GetSendOnSuccessOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SendOnSuccess, true
}

// SetSendOnSuccess sets field value
func (o *Notification) SetSendOnSuccess(v bool) {
	o.SendOnSuccess = v
}

// GetSendOnFailure returns the SendOnFailure field value
func (o *Notification) GetSendOnFailure() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SendOnFailure
}

// GetSendOnFailureOk returns a tuple with the SendOnFailure field value
// and a boolean to check if the value has been set.
func (o *Notification) GetSendOnFailureOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SendOnFailure, true
}

// SetSendOnFailure sets field value
func (o *Notification) SetSendOnFailure(v bool) {
	o.SendOnFailure = v
}

// GetSlackConfiguration returns the SlackConfiguration field value if set, zero value otherwise.
func (o *Notification) GetSlackConfiguration() SlackNotificationConfiguration {
	if o == nil || o.SlackConfiguration == nil {
		var ret SlackNotificationConfiguration
		return ret
	}
	return *o.SlackConfiguration
}

// GetSlackConfigurationOk returns a tuple with the SlackConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetSlackConfigurationOk() (*SlackNotificationConfiguration, bool) {
	if o == nil || o.SlackConfiguration == nil {
		return nil, false
	}
	return o.SlackConfiguration, true
}

// HasSlackConfiguration returns a boolean if a field has been set.
func (o *Notification) HasSlackConfiguration() bool {
	if o != nil && o.SlackConfiguration != nil {
		return true
	}

	return false
}

// SetSlackConfiguration gets a reference to the given SlackNotificationConfiguration and assigns it to the SlackConfiguration field.
func (o *Notification) SetSlackConfiguration(v SlackNotificationConfiguration) {
	o.SlackConfiguration = &v
}

func (o Notification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["notificationType"] = o.NotificationType
	}
	if true {
		toSerialize["sendOnSuccess"] = o.SendOnSuccess
	}
	if true {
		toSerialize["sendOnFailure"] = o.SendOnFailure
	}
	if o.SlackConfiguration != nil {
		toSerialize["slackConfiguration"] = o.SlackConfiguration
	}
	return json.Marshal(toSerialize)
}

type NullableNotification struct {
	value *Notification
	isSet bool
}

func (v NullableNotification) Get() *Notification {
	return v.value
}

func (v *NullableNotification) Set(val *Notification) {
	v.value = val
	v.isSet = true
}

func (v NullableNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotification(val *Notification) *NullableNotification {
	return &NullableNotification{value: val, isSet: true}
}

func (v NullableNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


