/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte

import (
	"encoding/json"
)

// AdvancedAuth struct for AdvancedAuth
type AdvancedAuth struct {
	AuthFlowType *string `json:"authFlowType,omitempty"`
	// Json Path to a field in the connectorSpecification that should exist for the advanced auth to be applicable.
	PredicateKey []string `json:"predicateKey,omitempty"`
	// Value of the predicate_key fields for the advanced auth to be applicable.
	PredicateValue *string `json:"predicateValue,omitempty"`
	OauthConfigSpecification *OAuthConfigSpecification `json:"oauthConfigSpecification,omitempty"`
}

// NewAdvancedAuth instantiates a new AdvancedAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvancedAuth() *AdvancedAuth {
	this := AdvancedAuth{}
	return &this
}

// NewAdvancedAuthWithDefaults instantiates a new AdvancedAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvancedAuthWithDefaults() *AdvancedAuth {
	this := AdvancedAuth{}
	return &this
}

// GetAuthFlowType returns the AuthFlowType field value if set, zero value otherwise.
func (o *AdvancedAuth) GetAuthFlowType() string {
	if o == nil || o.AuthFlowType == nil {
		var ret string
		return ret
	}
	return *o.AuthFlowType
}

// GetAuthFlowTypeOk returns a tuple with the AuthFlowType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedAuth) GetAuthFlowTypeOk() (*string, bool) {
	if o == nil || o.AuthFlowType == nil {
		return nil, false
	}
	return o.AuthFlowType, true
}

// HasAuthFlowType returns a boolean if a field has been set.
func (o *AdvancedAuth) HasAuthFlowType() bool {
	if o != nil && o.AuthFlowType != nil {
		return true
	}

	return false
}

// SetAuthFlowType gets a reference to the given string and assigns it to the AuthFlowType field.
func (o *AdvancedAuth) SetAuthFlowType(v string) {
	o.AuthFlowType = &v
}

// GetPredicateKey returns the PredicateKey field value if set, zero value otherwise.
func (o *AdvancedAuth) GetPredicateKey() []string {
	if o == nil || o.PredicateKey == nil {
		var ret []string
		return ret
	}
	return o.PredicateKey
}

// GetPredicateKeyOk returns a tuple with the PredicateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedAuth) GetPredicateKeyOk() ([]string, bool) {
	if o == nil || o.PredicateKey == nil {
		return nil, false
	}
	return o.PredicateKey, true
}

// HasPredicateKey returns a boolean if a field has been set.
func (o *AdvancedAuth) HasPredicateKey() bool {
	if o != nil && o.PredicateKey != nil {
		return true
	}

	return false
}

// SetPredicateKey gets a reference to the given []string and assigns it to the PredicateKey field.
func (o *AdvancedAuth) SetPredicateKey(v []string) {
	o.PredicateKey = v
}

// GetPredicateValue returns the PredicateValue field value if set, zero value otherwise.
func (o *AdvancedAuth) GetPredicateValue() string {
	if o == nil || o.PredicateValue == nil {
		var ret string
		return ret
	}
	return *o.PredicateValue
}

// GetPredicateValueOk returns a tuple with the PredicateValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedAuth) GetPredicateValueOk() (*string, bool) {
	if o == nil || o.PredicateValue == nil {
		return nil, false
	}
	return o.PredicateValue, true
}

// HasPredicateValue returns a boolean if a field has been set.
func (o *AdvancedAuth) HasPredicateValue() bool {
	if o != nil && o.PredicateValue != nil {
		return true
	}

	return false
}

// SetPredicateValue gets a reference to the given string and assigns it to the PredicateValue field.
func (o *AdvancedAuth) SetPredicateValue(v string) {
	o.PredicateValue = &v
}

// GetOauthConfigSpecification returns the OauthConfigSpecification field value if set, zero value otherwise.
func (o *AdvancedAuth) GetOauthConfigSpecification() OAuthConfigSpecification {
	if o == nil || o.OauthConfigSpecification == nil {
		var ret OAuthConfigSpecification
		return ret
	}
	return *o.OauthConfigSpecification
}

// GetOauthConfigSpecificationOk returns a tuple with the OauthConfigSpecification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedAuth) GetOauthConfigSpecificationOk() (*OAuthConfigSpecification, bool) {
	if o == nil || o.OauthConfigSpecification == nil {
		return nil, false
	}
	return o.OauthConfigSpecification, true
}

// HasOauthConfigSpecification returns a boolean if a field has been set.
func (o *AdvancedAuth) HasOauthConfigSpecification() bool {
	if o != nil && o.OauthConfigSpecification != nil {
		return true
	}

	return false
}

// SetOauthConfigSpecification gets a reference to the given OAuthConfigSpecification and assigns it to the OauthConfigSpecification field.
func (o *AdvancedAuth) SetOauthConfigSpecification(v OAuthConfigSpecification) {
	o.OauthConfigSpecification = &v
}

func (o AdvancedAuth) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthFlowType != nil {
		toSerialize["authFlowType"] = o.AuthFlowType
	}
	if o.PredicateKey != nil {
		toSerialize["predicateKey"] = o.PredicateKey
	}
	if o.PredicateValue != nil {
		toSerialize["predicateValue"] = o.PredicateValue
	}
	if o.OauthConfigSpecification != nil {
		toSerialize["oauthConfigSpecification"] = o.OauthConfigSpecification
	}
	return json.Marshal(toSerialize)
}

type NullableAdvancedAuth struct {
	value *AdvancedAuth
	isSet bool
}

func (v NullableAdvancedAuth) Get() *AdvancedAuth {
	return v.value
}

func (v *NullableAdvancedAuth) Set(val *AdvancedAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvancedAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvancedAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvancedAuth(val *AdvancedAuth) *NullableAdvancedAuth {
	return &NullableAdvancedAuth{value: val, isSet: true}
}

func (v NullableAdvancedAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvancedAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


