/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte

import (
	"encoding/json"
)

// OperatorConfiguration struct for OperatorConfiguration
type OperatorConfiguration struct {
	OperatorType OperatorType `json:"operatorType"`
	Normalization *OperatorNormalization `json:"normalization,omitempty"`
	Dbt *OperatorDbt `json:"dbt,omitempty"`
}

// NewOperatorConfiguration instantiates a new OperatorConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperatorConfiguration(operatorType OperatorType) *OperatorConfiguration {
	this := OperatorConfiguration{}
	this.OperatorType = operatorType
	return &this
}

// NewOperatorConfigurationWithDefaults instantiates a new OperatorConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperatorConfigurationWithDefaults() *OperatorConfiguration {
	this := OperatorConfiguration{}
	return &this
}

// GetOperatorType returns the OperatorType field value
func (o *OperatorConfiguration) GetOperatorType() OperatorType {
	if o == nil {
		var ret OperatorType
		return ret
	}

	return o.OperatorType
}

// GetOperatorTypeOk returns a tuple with the OperatorType field value
// and a boolean to check if the value has been set.
func (o *OperatorConfiguration) GetOperatorTypeOk() (*OperatorType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OperatorType, true
}

// SetOperatorType sets field value
func (o *OperatorConfiguration) SetOperatorType(v OperatorType) {
	o.OperatorType = v
}

// GetNormalization returns the Normalization field value if set, zero value otherwise.
func (o *OperatorConfiguration) GetNormalization() OperatorNormalization {
	if o == nil || o.Normalization == nil {
		var ret OperatorNormalization
		return ret
	}
	return *o.Normalization
}

// GetNormalizationOk returns a tuple with the Normalization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorConfiguration) GetNormalizationOk() (*OperatorNormalization, bool) {
	if o == nil || o.Normalization == nil {
		return nil, false
	}
	return o.Normalization, true
}

// HasNormalization returns a boolean if a field has been set.
func (o *OperatorConfiguration) HasNormalization() bool {
	if o != nil && o.Normalization != nil {
		return true
	}

	return false
}

// SetNormalization gets a reference to the given OperatorNormalization and assigns it to the Normalization field.
func (o *OperatorConfiguration) SetNormalization(v OperatorNormalization) {
	o.Normalization = &v
}

// GetDbt returns the Dbt field value if set, zero value otherwise.
func (o *OperatorConfiguration) GetDbt() OperatorDbt {
	if o == nil || o.Dbt == nil {
		var ret OperatorDbt
		return ret
	}
	return *o.Dbt
}

// GetDbtOk returns a tuple with the Dbt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorConfiguration) GetDbtOk() (*OperatorDbt, bool) {
	if o == nil || o.Dbt == nil {
		return nil, false
	}
	return o.Dbt, true
}

// HasDbt returns a boolean if a field has been set.
func (o *OperatorConfiguration) HasDbt() bool {
	if o != nil && o.Dbt != nil {
		return true
	}

	return false
}

// SetDbt gets a reference to the given OperatorDbt and assigns it to the Dbt field.
func (o *OperatorConfiguration) SetDbt(v OperatorDbt) {
	o.Dbt = &v
}

func (o OperatorConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["operatorType"] = o.OperatorType
	}
	if o.Normalization != nil {
		toSerialize["normalization"] = o.Normalization
	}
	if o.Dbt != nil {
		toSerialize["dbt"] = o.Dbt
	}
	return json.Marshal(toSerialize)
}

type NullableOperatorConfiguration struct {
	value *OperatorConfiguration
	isSet bool
}

func (v NullableOperatorConfiguration) Get() *OperatorConfiguration {
	return v.value
}

func (v *NullableOperatorConfiguration) Set(val *OperatorConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableOperatorConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableOperatorConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperatorConfiguration(val *OperatorConfiguration) *NullableOperatorConfiguration {
	return &NullableOperatorConfiguration{value: val, isSet: true}
}

func (v NullableOperatorConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperatorConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


