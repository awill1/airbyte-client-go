/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte

import (
	"encoding/json"
)

// OAuthConfigSpecification struct for OAuthConfigSpecification
type OAuthConfigSpecification struct {
	// OAuth specific blob.
	OauthUserInputFromConnectorConfigSpecification interface{} `json:"oauthUserInputFromConnectorConfigSpecification,omitempty"`
	// OAuth specific blob.
	CompleteOAuthOutputSpecification interface{} `json:"completeOAuthOutputSpecification,omitempty"`
	// OAuth specific blob.
	CompleteOAuthServerInputSpecification interface{} `json:"completeOAuthServerInputSpecification,omitempty"`
	// OAuth specific blob.
	CompleteOAuthServerOutputSpecification interface{} `json:"completeOAuthServerOutputSpecification,omitempty"`
}

// NewOAuthConfigSpecification instantiates a new OAuthConfigSpecification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthConfigSpecification() *OAuthConfigSpecification {
	this := OAuthConfigSpecification{}
	return &this
}

// NewOAuthConfigSpecificationWithDefaults instantiates a new OAuthConfigSpecification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthConfigSpecificationWithDefaults() *OAuthConfigSpecification {
	this := OAuthConfigSpecification{}
	return &this
}

// GetOauthUserInputFromConnectorConfigSpecification returns the OauthUserInputFromConnectorConfigSpecification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthConfigSpecification) GetOauthUserInputFromConnectorConfigSpecification() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.OauthUserInputFromConnectorConfigSpecification
}

// GetOauthUserInputFromConnectorConfigSpecificationOk returns a tuple with the OauthUserInputFromConnectorConfigSpecification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthConfigSpecification) GetOauthUserInputFromConnectorConfigSpecificationOk() (*interface{}, bool) {
	if o == nil || o.OauthUserInputFromConnectorConfigSpecification == nil {
		return nil, false
	}
	return &o.OauthUserInputFromConnectorConfigSpecification, true
}

// HasOauthUserInputFromConnectorConfigSpecification returns a boolean if a field has been set.
func (o *OAuthConfigSpecification) HasOauthUserInputFromConnectorConfigSpecification() bool {
	if o != nil && o.OauthUserInputFromConnectorConfigSpecification != nil {
		return true
	}

	return false
}

// SetOauthUserInputFromConnectorConfigSpecification gets a reference to the given interface{} and assigns it to the OauthUserInputFromConnectorConfigSpecification field.
func (o *OAuthConfigSpecification) SetOauthUserInputFromConnectorConfigSpecification(v interface{}) {
	o.OauthUserInputFromConnectorConfigSpecification = v
}

// GetCompleteOAuthOutputSpecification returns the CompleteOAuthOutputSpecification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthConfigSpecification) GetCompleteOAuthOutputSpecification() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.CompleteOAuthOutputSpecification
}

// GetCompleteOAuthOutputSpecificationOk returns a tuple with the CompleteOAuthOutputSpecification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthConfigSpecification) GetCompleteOAuthOutputSpecificationOk() (*interface{}, bool) {
	if o == nil || o.CompleteOAuthOutputSpecification == nil {
		return nil, false
	}
	return &o.CompleteOAuthOutputSpecification, true
}

// HasCompleteOAuthOutputSpecification returns a boolean if a field has been set.
func (o *OAuthConfigSpecification) HasCompleteOAuthOutputSpecification() bool {
	if o != nil && o.CompleteOAuthOutputSpecification != nil {
		return true
	}

	return false
}

// SetCompleteOAuthOutputSpecification gets a reference to the given interface{} and assigns it to the CompleteOAuthOutputSpecification field.
func (o *OAuthConfigSpecification) SetCompleteOAuthOutputSpecification(v interface{}) {
	o.CompleteOAuthOutputSpecification = v
}

// GetCompleteOAuthServerInputSpecification returns the CompleteOAuthServerInputSpecification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthConfigSpecification) GetCompleteOAuthServerInputSpecification() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.CompleteOAuthServerInputSpecification
}

// GetCompleteOAuthServerInputSpecificationOk returns a tuple with the CompleteOAuthServerInputSpecification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthConfigSpecification) GetCompleteOAuthServerInputSpecificationOk() (*interface{}, bool) {
	if o == nil || o.CompleteOAuthServerInputSpecification == nil {
		return nil, false
	}
	return &o.CompleteOAuthServerInputSpecification, true
}

// HasCompleteOAuthServerInputSpecification returns a boolean if a field has been set.
func (o *OAuthConfigSpecification) HasCompleteOAuthServerInputSpecification() bool {
	if o != nil && o.CompleteOAuthServerInputSpecification != nil {
		return true
	}

	return false
}

// SetCompleteOAuthServerInputSpecification gets a reference to the given interface{} and assigns it to the CompleteOAuthServerInputSpecification field.
func (o *OAuthConfigSpecification) SetCompleteOAuthServerInputSpecification(v interface{}) {
	o.CompleteOAuthServerInputSpecification = v
}

// GetCompleteOAuthServerOutputSpecification returns the CompleteOAuthServerOutputSpecification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuthConfigSpecification) GetCompleteOAuthServerOutputSpecification() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.CompleteOAuthServerOutputSpecification
}

// GetCompleteOAuthServerOutputSpecificationOk returns a tuple with the CompleteOAuthServerOutputSpecification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuthConfigSpecification) GetCompleteOAuthServerOutputSpecificationOk() (*interface{}, bool) {
	if o == nil || o.CompleteOAuthServerOutputSpecification == nil {
		return nil, false
	}
	return &o.CompleteOAuthServerOutputSpecification, true
}

// HasCompleteOAuthServerOutputSpecification returns a boolean if a field has been set.
func (o *OAuthConfigSpecification) HasCompleteOAuthServerOutputSpecification() bool {
	if o != nil && o.CompleteOAuthServerOutputSpecification != nil {
		return true
	}

	return false
}

// SetCompleteOAuthServerOutputSpecification gets a reference to the given interface{} and assigns it to the CompleteOAuthServerOutputSpecification field.
func (o *OAuthConfigSpecification) SetCompleteOAuthServerOutputSpecification(v interface{}) {
	o.CompleteOAuthServerOutputSpecification = v
}

func (o OAuthConfigSpecification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OauthUserInputFromConnectorConfigSpecification != nil {
		toSerialize["oauthUserInputFromConnectorConfigSpecification"] = o.OauthUserInputFromConnectorConfigSpecification
	}
	if o.CompleteOAuthOutputSpecification != nil {
		toSerialize["completeOAuthOutputSpecification"] = o.CompleteOAuthOutputSpecification
	}
	if o.CompleteOAuthServerInputSpecification != nil {
		toSerialize["completeOAuthServerInputSpecification"] = o.CompleteOAuthServerInputSpecification
	}
	if o.CompleteOAuthServerOutputSpecification != nil {
		toSerialize["completeOAuthServerOutputSpecification"] = o.CompleteOAuthServerOutputSpecification
	}
	return json.Marshal(toSerialize)
}

type NullableOAuthConfigSpecification struct {
	value *OAuthConfigSpecification
	isSet bool
}

func (v NullableOAuthConfigSpecification) Get() *OAuthConfigSpecification {
	return v.value
}

func (v *NullableOAuthConfigSpecification) Set(val *OAuthConfigSpecification) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthConfigSpecification) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthConfigSpecification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthConfigSpecification(val *OAuthConfigSpecification) *NullableOAuthConfigSpecification {
	return &NullableOAuthConfigSpecification{value: val, isSet: true}
}

func (v NullableOAuthConfigSpecification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthConfigSpecification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


