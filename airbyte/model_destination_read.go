/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte

import (
	"encoding/json"
)

// DestinationRead struct for DestinationRead
type DestinationRead struct {
	DestinationDefinitionId string `json:"destinationDefinitionId"`
	DestinationId string `json:"destinationId"`
	WorkspaceId string `json:"workspaceId"`
	// The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.
	ConnectionConfiguration interface{} `json:"connectionConfiguration"`
	Name string `json:"name"`
	DestinationName string `json:"destinationName"`
}

// NewDestinationRead instantiates a new DestinationRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationRead(destinationDefinitionId string, destinationId string, workspaceId string, connectionConfiguration interface{}, name string, destinationName string) *DestinationRead {
	this := DestinationRead{}
	this.DestinationDefinitionId = destinationDefinitionId
	this.DestinationId = destinationId
	this.WorkspaceId = workspaceId
	this.ConnectionConfiguration = connectionConfiguration
	this.Name = name
	this.DestinationName = destinationName
	return &this
}

// NewDestinationReadWithDefaults instantiates a new DestinationRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationReadWithDefaults() *DestinationRead {
	this := DestinationRead{}
	return &this
}

// GetDestinationDefinitionId returns the DestinationDefinitionId field value
func (o *DestinationRead) GetDestinationDefinitionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationDefinitionId
}

// GetDestinationDefinitionIdOk returns a tuple with the DestinationDefinitionId field value
// and a boolean to check if the value has been set.
func (o *DestinationRead) GetDestinationDefinitionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DestinationDefinitionId, true
}

// SetDestinationDefinitionId sets field value
func (o *DestinationRead) SetDestinationDefinitionId(v string) {
	o.DestinationDefinitionId = v
}

// GetDestinationId returns the DestinationId field value
func (o *DestinationRead) GetDestinationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationId
}

// GetDestinationIdOk returns a tuple with the DestinationId field value
// and a boolean to check if the value has been set.
func (o *DestinationRead) GetDestinationIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DestinationId, true
}

// SetDestinationId sets field value
func (o *DestinationRead) SetDestinationId(v string) {
	o.DestinationId = v
}

// GetWorkspaceId returns the WorkspaceId field value
func (o *DestinationRead) GetWorkspaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkspaceId
}

// GetWorkspaceIdOk returns a tuple with the WorkspaceId field value
// and a boolean to check if the value has been set.
func (o *DestinationRead) GetWorkspaceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WorkspaceId, true
}

// SetWorkspaceId sets field value
func (o *DestinationRead) SetWorkspaceId(v string) {
	o.WorkspaceId = v
}

// GetConnectionConfiguration returns the ConnectionConfiguration field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *DestinationRead) GetConnectionConfiguration() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ConnectionConfiguration
}

// GetConnectionConfigurationOk returns a tuple with the ConnectionConfiguration field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DestinationRead) GetConnectionConfigurationOk() (*interface{}, bool) {
	if o == nil || o.ConnectionConfiguration == nil {
		return nil, false
	}
	return &o.ConnectionConfiguration, true
}

// SetConnectionConfiguration sets field value
func (o *DestinationRead) SetConnectionConfiguration(v interface{}) {
	o.ConnectionConfiguration = v
}

// GetName returns the Name field value
func (o *DestinationRead) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DestinationRead) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DestinationRead) SetName(v string) {
	o.Name = v
}

// GetDestinationName returns the DestinationName field value
func (o *DestinationRead) GetDestinationName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationName
}

// GetDestinationNameOk returns a tuple with the DestinationName field value
// and a boolean to check if the value has been set.
func (o *DestinationRead) GetDestinationNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DestinationName, true
}

// SetDestinationName sets field value
func (o *DestinationRead) SetDestinationName(v string) {
	o.DestinationName = v
}

func (o DestinationRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["destinationDefinitionId"] = o.DestinationDefinitionId
	}
	if true {
		toSerialize["destinationId"] = o.DestinationId
	}
	if true {
		toSerialize["workspaceId"] = o.WorkspaceId
	}
	if o.ConnectionConfiguration != nil {
		toSerialize["connectionConfiguration"] = o.ConnectionConfiguration
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["destinationName"] = o.DestinationName
	}
	return json.Marshal(toSerialize)
}

type NullableDestinationRead struct {
	value *DestinationRead
	isSet bool
}

func (v NullableDestinationRead) Get() *DestinationRead {
	return v.value
}

func (v *NullableDestinationRead) Set(val *DestinationRead) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationRead) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationRead(val *DestinationRead) *NullableDestinationRead {
	return &NullableDestinationRead{value: val, isSet: true}
}

func (v NullableDestinationRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


