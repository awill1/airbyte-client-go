/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte

import (
	"encoding/json"
)

// AirbyteStreamAndConfiguration each stream is split in two parts; the immutable schema from source and mutable configuration for destination
type AirbyteStreamAndConfiguration struct {
	Stream *AirbyteStream `json:"stream,omitempty"`
	Config *AirbyteStreamConfiguration `json:"config,omitempty"`
}

// NewAirbyteStreamAndConfiguration instantiates a new AirbyteStreamAndConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAirbyteStreamAndConfiguration() *AirbyteStreamAndConfiguration {
	this := AirbyteStreamAndConfiguration{}
	return &this
}

// NewAirbyteStreamAndConfigurationWithDefaults instantiates a new AirbyteStreamAndConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAirbyteStreamAndConfigurationWithDefaults() *AirbyteStreamAndConfiguration {
	this := AirbyteStreamAndConfiguration{}
	return &this
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *AirbyteStreamAndConfiguration) GetStream() AirbyteStream {
	if o == nil || o.Stream == nil {
		var ret AirbyteStream
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirbyteStreamAndConfiguration) GetStreamOk() (*AirbyteStream, bool) {
	if o == nil || o.Stream == nil {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *AirbyteStreamAndConfiguration) HasStream() bool {
	if o != nil && o.Stream != nil {
		return true
	}

	return false
}

// SetStream gets a reference to the given AirbyteStream and assigns it to the Stream field.
func (o *AirbyteStreamAndConfiguration) SetStream(v AirbyteStream) {
	o.Stream = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *AirbyteStreamAndConfiguration) GetConfig() AirbyteStreamConfiguration {
	if o == nil || o.Config == nil {
		var ret AirbyteStreamConfiguration
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirbyteStreamAndConfiguration) GetConfigOk() (*AirbyteStreamConfiguration, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *AirbyteStreamAndConfiguration) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given AirbyteStreamConfiguration and assigns it to the Config field.
func (o *AirbyteStreamAndConfiguration) SetConfig(v AirbyteStreamConfiguration) {
	o.Config = &v
}

func (o AirbyteStreamAndConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Stream != nil {
		toSerialize["stream"] = o.Stream
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableAirbyteStreamAndConfiguration struct {
	value *AirbyteStreamAndConfiguration
	isSet bool
}

func (v NullableAirbyteStreamAndConfiguration) Get() *AirbyteStreamAndConfiguration {
	return v.value
}

func (v *NullableAirbyteStreamAndConfiguration) Set(val *AirbyteStreamAndConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableAirbyteStreamAndConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableAirbyteStreamAndConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAirbyteStreamAndConfiguration(val *AirbyteStreamAndConfiguration) *NullableAirbyteStreamAndConfiguration {
	return &NullableAirbyteStreamAndConfiguration{value: val, isSet: true}
}

func (v NullableAirbyteStreamAndConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAirbyteStreamAndConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


