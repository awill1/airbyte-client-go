/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte

import (
	"encoding/json"
)

// AttemptStats struct for AttemptStats
type AttemptStats struct {
	RecordsEmitted *int64 `json:"recordsEmitted,omitempty"`
	BytesEmitted *int64 `json:"bytesEmitted,omitempty"`
	StateMessagesEmitted *int64 `json:"stateMessagesEmitted,omitempty"`
	RecordsCommitted *int64 `json:"recordsCommitted,omitempty"`
}

// NewAttemptStats instantiates a new AttemptStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttemptStats() *AttemptStats {
	this := AttemptStats{}
	return &this
}

// NewAttemptStatsWithDefaults instantiates a new AttemptStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttemptStatsWithDefaults() *AttemptStats {
	this := AttemptStats{}
	return &this
}

// GetRecordsEmitted returns the RecordsEmitted field value if set, zero value otherwise.
func (o *AttemptStats) GetRecordsEmitted() int64 {
	if o == nil || o.RecordsEmitted == nil {
		var ret int64
		return ret
	}
	return *o.RecordsEmitted
}

// GetRecordsEmittedOk returns a tuple with the RecordsEmitted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttemptStats) GetRecordsEmittedOk() (*int64, bool) {
	if o == nil || o.RecordsEmitted == nil {
		return nil, false
	}
	return o.RecordsEmitted, true
}

// HasRecordsEmitted returns a boolean if a field has been set.
func (o *AttemptStats) HasRecordsEmitted() bool {
	if o != nil && o.RecordsEmitted != nil {
		return true
	}

	return false
}

// SetRecordsEmitted gets a reference to the given int64 and assigns it to the RecordsEmitted field.
func (o *AttemptStats) SetRecordsEmitted(v int64) {
	o.RecordsEmitted = &v
}

// GetBytesEmitted returns the BytesEmitted field value if set, zero value otherwise.
func (o *AttemptStats) GetBytesEmitted() int64 {
	if o == nil || o.BytesEmitted == nil {
		var ret int64
		return ret
	}
	return *o.BytesEmitted
}

// GetBytesEmittedOk returns a tuple with the BytesEmitted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttemptStats) GetBytesEmittedOk() (*int64, bool) {
	if o == nil || o.BytesEmitted == nil {
		return nil, false
	}
	return o.BytesEmitted, true
}

// HasBytesEmitted returns a boolean if a field has been set.
func (o *AttemptStats) HasBytesEmitted() bool {
	if o != nil && o.BytesEmitted != nil {
		return true
	}

	return false
}

// SetBytesEmitted gets a reference to the given int64 and assigns it to the BytesEmitted field.
func (o *AttemptStats) SetBytesEmitted(v int64) {
	o.BytesEmitted = &v
}

// GetStateMessagesEmitted returns the StateMessagesEmitted field value if set, zero value otherwise.
func (o *AttemptStats) GetStateMessagesEmitted() int64 {
	if o == nil || o.StateMessagesEmitted == nil {
		var ret int64
		return ret
	}
	return *o.StateMessagesEmitted
}

// GetStateMessagesEmittedOk returns a tuple with the StateMessagesEmitted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttemptStats) GetStateMessagesEmittedOk() (*int64, bool) {
	if o == nil || o.StateMessagesEmitted == nil {
		return nil, false
	}
	return o.StateMessagesEmitted, true
}

// HasStateMessagesEmitted returns a boolean if a field has been set.
func (o *AttemptStats) HasStateMessagesEmitted() bool {
	if o != nil && o.StateMessagesEmitted != nil {
		return true
	}

	return false
}

// SetStateMessagesEmitted gets a reference to the given int64 and assigns it to the StateMessagesEmitted field.
func (o *AttemptStats) SetStateMessagesEmitted(v int64) {
	o.StateMessagesEmitted = &v
}

// GetRecordsCommitted returns the RecordsCommitted field value if set, zero value otherwise.
func (o *AttemptStats) GetRecordsCommitted() int64 {
	if o == nil || o.RecordsCommitted == nil {
		var ret int64
		return ret
	}
	return *o.RecordsCommitted
}

// GetRecordsCommittedOk returns a tuple with the RecordsCommitted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttemptStats) GetRecordsCommittedOk() (*int64, bool) {
	if o == nil || o.RecordsCommitted == nil {
		return nil, false
	}
	return o.RecordsCommitted, true
}

// HasRecordsCommitted returns a boolean if a field has been set.
func (o *AttemptStats) HasRecordsCommitted() bool {
	if o != nil && o.RecordsCommitted != nil {
		return true
	}

	return false
}

// SetRecordsCommitted gets a reference to the given int64 and assigns it to the RecordsCommitted field.
func (o *AttemptStats) SetRecordsCommitted(v int64) {
	o.RecordsCommitted = &v
}

func (o AttemptStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RecordsEmitted != nil {
		toSerialize["recordsEmitted"] = o.RecordsEmitted
	}
	if o.BytesEmitted != nil {
		toSerialize["bytesEmitted"] = o.BytesEmitted
	}
	if o.StateMessagesEmitted != nil {
		toSerialize["stateMessagesEmitted"] = o.StateMessagesEmitted
	}
	if o.RecordsCommitted != nil {
		toSerialize["recordsCommitted"] = o.RecordsCommitted
	}
	return json.Marshal(toSerialize)
}

type NullableAttemptStats struct {
	value *AttemptStats
	isSet bool
}

func (v NullableAttemptStats) Get() *AttemptStats {
	return v.value
}

func (v *NullableAttemptStats) Set(val *AttemptStats) {
	v.value = val
	v.isSet = true
}

func (v NullableAttemptStats) IsSet() bool {
	return v.isSet
}

func (v *NullableAttemptStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttemptStats(val *AttemptStats) *NullableAttemptStats {
	return &NullableAttemptStats{value: val, isSet: true}
}

func (v NullableAttemptStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttemptStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


