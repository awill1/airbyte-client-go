/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte

import (
	"encoding/json"
)

// AttemptInfoRead struct for AttemptInfoRead
type AttemptInfoRead struct {
	Attempt AttemptRead `json:"attempt"`
	Logs LogRead `json:"logs"`
}

// NewAttemptInfoRead instantiates a new AttemptInfoRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttemptInfoRead(attempt AttemptRead, logs LogRead) *AttemptInfoRead {
	this := AttemptInfoRead{}
	this.Attempt = attempt
	this.Logs = logs
	return &this
}

// NewAttemptInfoReadWithDefaults instantiates a new AttemptInfoRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttemptInfoReadWithDefaults() *AttemptInfoRead {
	this := AttemptInfoRead{}
	return &this
}

// GetAttempt returns the Attempt field value
func (o *AttemptInfoRead) GetAttempt() AttemptRead {
	if o == nil {
		var ret AttemptRead
		return ret
	}

	return o.Attempt
}

// GetAttemptOk returns a tuple with the Attempt field value
// and a boolean to check if the value has been set.
func (o *AttemptInfoRead) GetAttemptOk() (*AttemptRead, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Attempt, true
}

// SetAttempt sets field value
func (o *AttemptInfoRead) SetAttempt(v AttemptRead) {
	o.Attempt = v
}

// GetLogs returns the Logs field value
func (o *AttemptInfoRead) GetLogs() LogRead {
	if o == nil {
		var ret LogRead
		return ret
	}

	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value
// and a boolean to check if the value has been set.
func (o *AttemptInfoRead) GetLogsOk() (*LogRead, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Logs, true
}

// SetLogs sets field value
func (o *AttemptInfoRead) SetLogs(v LogRead) {
	o.Logs = v
}

func (o AttemptInfoRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["attempt"] = o.Attempt
	}
	if true {
		toSerialize["logs"] = o.Logs
	}
	return json.Marshal(toSerialize)
}

type NullableAttemptInfoRead struct {
	value *AttemptInfoRead
	isSet bool
}

func (v NullableAttemptInfoRead) Get() *AttemptInfoRead {
	return v.value
}

func (v *NullableAttemptInfoRead) Set(val *AttemptInfoRead) {
	v.value = val
	v.isSet = true
}

func (v NullableAttemptInfoRead) IsSet() bool {
	return v.isSet
}

func (v *NullableAttemptInfoRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttemptInfoRead(val *AttemptInfoRead) *NullableAttemptInfoRead {
	return &NullableAttemptInfoRead{value: val, isSet: true}
}

func (v NullableAttemptInfoRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttemptInfoRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


