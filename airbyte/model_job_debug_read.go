/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte

import (
	"encoding/json"
)

// JobDebugRead struct for JobDebugRead
type JobDebugRead struct {
	Id int64 `json:"id"`
	ConfigType JobConfigType `json:"configType"`
	ConfigId string `json:"configId"`
	Status JobStatus `json:"status"`
	AirbyteVersion string `json:"airbyteVersion"`
	SourceDefinition SourceDefinitionRead `json:"sourceDefinition"`
	DestinationDefinition DestinationDefinitionRead `json:"destinationDefinition"`
}

// NewJobDebugRead instantiates a new JobDebugRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobDebugRead(id int64, configType JobConfigType, configId string, status JobStatus, airbyteVersion string, sourceDefinition SourceDefinitionRead, destinationDefinition DestinationDefinitionRead) *JobDebugRead {
	this := JobDebugRead{}
	this.Id = id
	this.ConfigType = configType
	this.ConfigId = configId
	this.Status = status
	this.AirbyteVersion = airbyteVersion
	this.SourceDefinition = sourceDefinition
	this.DestinationDefinition = destinationDefinition
	return &this
}

// NewJobDebugReadWithDefaults instantiates a new JobDebugRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobDebugReadWithDefaults() *JobDebugRead {
	this := JobDebugRead{}
	return &this
}

// GetId returns the Id field value
func (o *JobDebugRead) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *JobDebugRead) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *JobDebugRead) SetId(v int64) {
	o.Id = v
}

// GetConfigType returns the ConfigType field value
func (o *JobDebugRead) GetConfigType() JobConfigType {
	if o == nil {
		var ret JobConfigType
		return ret
	}

	return o.ConfigType
}

// GetConfigTypeOk returns a tuple with the ConfigType field value
// and a boolean to check if the value has been set.
func (o *JobDebugRead) GetConfigTypeOk() (*JobConfigType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConfigType, true
}

// SetConfigType sets field value
func (o *JobDebugRead) SetConfigType(v JobConfigType) {
	o.ConfigType = v
}

// GetConfigId returns the ConfigId field value
func (o *JobDebugRead) GetConfigId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigId
}

// GetConfigIdOk returns a tuple with the ConfigId field value
// and a boolean to check if the value has been set.
func (o *JobDebugRead) GetConfigIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConfigId, true
}

// SetConfigId sets field value
func (o *JobDebugRead) SetConfigId(v string) {
	o.ConfigId = v
}

// GetStatus returns the Status field value
func (o *JobDebugRead) GetStatus() JobStatus {
	if o == nil {
		var ret JobStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *JobDebugRead) GetStatusOk() (*JobStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *JobDebugRead) SetStatus(v JobStatus) {
	o.Status = v
}

// GetAirbyteVersion returns the AirbyteVersion field value
func (o *JobDebugRead) GetAirbyteVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AirbyteVersion
}

// GetAirbyteVersionOk returns a tuple with the AirbyteVersion field value
// and a boolean to check if the value has been set.
func (o *JobDebugRead) GetAirbyteVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AirbyteVersion, true
}

// SetAirbyteVersion sets field value
func (o *JobDebugRead) SetAirbyteVersion(v string) {
	o.AirbyteVersion = v
}

// GetSourceDefinition returns the SourceDefinition field value
func (o *JobDebugRead) GetSourceDefinition() SourceDefinitionRead {
	if o == nil {
		var ret SourceDefinitionRead
		return ret
	}

	return o.SourceDefinition
}

// GetSourceDefinitionOk returns a tuple with the SourceDefinition field value
// and a boolean to check if the value has been set.
func (o *JobDebugRead) GetSourceDefinitionOk() (*SourceDefinitionRead, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SourceDefinition, true
}

// SetSourceDefinition sets field value
func (o *JobDebugRead) SetSourceDefinition(v SourceDefinitionRead) {
	o.SourceDefinition = v
}

// GetDestinationDefinition returns the DestinationDefinition field value
func (o *JobDebugRead) GetDestinationDefinition() DestinationDefinitionRead {
	if o == nil {
		var ret DestinationDefinitionRead
		return ret
	}

	return o.DestinationDefinition
}

// GetDestinationDefinitionOk returns a tuple with the DestinationDefinition field value
// and a boolean to check if the value has been set.
func (o *JobDebugRead) GetDestinationDefinitionOk() (*DestinationDefinitionRead, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DestinationDefinition, true
}

// SetDestinationDefinition sets field value
func (o *JobDebugRead) SetDestinationDefinition(v DestinationDefinitionRead) {
	o.DestinationDefinition = v
}

func (o JobDebugRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["configType"] = o.ConfigType
	}
	if true {
		toSerialize["configId"] = o.ConfigId
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["airbyteVersion"] = o.AirbyteVersion
	}
	if true {
		toSerialize["sourceDefinition"] = o.SourceDefinition
	}
	if true {
		toSerialize["destinationDefinition"] = o.DestinationDefinition
	}
	return json.Marshal(toSerialize)
}

type NullableJobDebugRead struct {
	value *JobDebugRead
	isSet bool
}

func (v NullableJobDebugRead) Get() *JobDebugRead {
	return v.value
}

func (v *NullableJobDebugRead) Set(val *JobDebugRead) {
	v.value = val
	v.isSet = true
}

func (v NullableJobDebugRead) IsSet() bool {
	return v.isSet
}

func (v *NullableJobDebugRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobDebugRead(val *JobDebugRead) *NullableJobDebugRead {
	return &NullableJobDebugRead{value: val, isSet: true}
}

func (v NullableJobDebugRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobDebugRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


