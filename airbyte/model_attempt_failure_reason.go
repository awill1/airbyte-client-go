/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte

import (
	"encoding/json"
)

// AttemptFailureReason struct for AttemptFailureReason
type AttemptFailureReason struct {
	FailureOrigin *AttemptFailureOrigin `json:"failureOrigin,omitempty"`
	FailureType *AttemptFailureType `json:"failureType,omitempty"`
	ExternalMessage *string `json:"externalMessage,omitempty"`
	Stacktrace *string `json:"stacktrace,omitempty"`
	// True if it is known that retrying may succeed, e.g. for a transient failure. False if it is known that a retry will not succeed, e.g. for a configuration issue. If not set, retryable status is not well known.
	Retryable *bool `json:"retryable,omitempty"`
	Timestamp int64 `json:"timestamp"`
}

// NewAttemptFailureReason instantiates a new AttemptFailureReason object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttemptFailureReason(timestamp int64) *AttemptFailureReason {
	this := AttemptFailureReason{}
	this.Timestamp = timestamp
	return &this
}

// NewAttemptFailureReasonWithDefaults instantiates a new AttemptFailureReason object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttemptFailureReasonWithDefaults() *AttemptFailureReason {
	this := AttemptFailureReason{}
	return &this
}

// GetFailureOrigin returns the FailureOrigin field value if set, zero value otherwise.
func (o *AttemptFailureReason) GetFailureOrigin() AttemptFailureOrigin {
	if o == nil || o.FailureOrigin == nil {
		var ret AttemptFailureOrigin
		return ret
	}
	return *o.FailureOrigin
}

// GetFailureOriginOk returns a tuple with the FailureOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttemptFailureReason) GetFailureOriginOk() (*AttemptFailureOrigin, bool) {
	if o == nil || o.FailureOrigin == nil {
		return nil, false
	}
	return o.FailureOrigin, true
}

// HasFailureOrigin returns a boolean if a field has been set.
func (o *AttemptFailureReason) HasFailureOrigin() bool {
	if o != nil && o.FailureOrigin != nil {
		return true
	}

	return false
}

// SetFailureOrigin gets a reference to the given AttemptFailureOrigin and assigns it to the FailureOrigin field.
func (o *AttemptFailureReason) SetFailureOrigin(v AttemptFailureOrigin) {
	o.FailureOrigin = &v
}

// GetFailureType returns the FailureType field value if set, zero value otherwise.
func (o *AttemptFailureReason) GetFailureType() AttemptFailureType {
	if o == nil || o.FailureType == nil {
		var ret AttemptFailureType
		return ret
	}
	return *o.FailureType
}

// GetFailureTypeOk returns a tuple with the FailureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttemptFailureReason) GetFailureTypeOk() (*AttemptFailureType, bool) {
	if o == nil || o.FailureType == nil {
		return nil, false
	}
	return o.FailureType, true
}

// HasFailureType returns a boolean if a field has been set.
func (o *AttemptFailureReason) HasFailureType() bool {
	if o != nil && o.FailureType != nil {
		return true
	}

	return false
}

// SetFailureType gets a reference to the given AttemptFailureType and assigns it to the FailureType field.
func (o *AttemptFailureReason) SetFailureType(v AttemptFailureType) {
	o.FailureType = &v
}

// GetExternalMessage returns the ExternalMessage field value if set, zero value otherwise.
func (o *AttemptFailureReason) GetExternalMessage() string {
	if o == nil || o.ExternalMessage == nil {
		var ret string
		return ret
	}
	return *o.ExternalMessage
}

// GetExternalMessageOk returns a tuple with the ExternalMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttemptFailureReason) GetExternalMessageOk() (*string, bool) {
	if o == nil || o.ExternalMessage == nil {
		return nil, false
	}
	return o.ExternalMessage, true
}

// HasExternalMessage returns a boolean if a field has been set.
func (o *AttemptFailureReason) HasExternalMessage() bool {
	if o != nil && o.ExternalMessage != nil {
		return true
	}

	return false
}

// SetExternalMessage gets a reference to the given string and assigns it to the ExternalMessage field.
func (o *AttemptFailureReason) SetExternalMessage(v string) {
	o.ExternalMessage = &v
}

// GetStacktrace returns the Stacktrace field value if set, zero value otherwise.
func (o *AttemptFailureReason) GetStacktrace() string {
	if o == nil || o.Stacktrace == nil {
		var ret string
		return ret
	}
	return *o.Stacktrace
}

// GetStacktraceOk returns a tuple with the Stacktrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttemptFailureReason) GetStacktraceOk() (*string, bool) {
	if o == nil || o.Stacktrace == nil {
		return nil, false
	}
	return o.Stacktrace, true
}

// HasStacktrace returns a boolean if a field has been set.
func (o *AttemptFailureReason) HasStacktrace() bool {
	if o != nil && o.Stacktrace != nil {
		return true
	}

	return false
}

// SetStacktrace gets a reference to the given string and assigns it to the Stacktrace field.
func (o *AttemptFailureReason) SetStacktrace(v string) {
	o.Stacktrace = &v
}

// GetRetryable returns the Retryable field value if set, zero value otherwise.
func (o *AttemptFailureReason) GetRetryable() bool {
	if o == nil || o.Retryable == nil {
		var ret bool
		return ret
	}
	return *o.Retryable
}

// GetRetryableOk returns a tuple with the Retryable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttemptFailureReason) GetRetryableOk() (*bool, bool) {
	if o == nil || o.Retryable == nil {
		return nil, false
	}
	return o.Retryable, true
}

// HasRetryable returns a boolean if a field has been set.
func (o *AttemptFailureReason) HasRetryable() bool {
	if o != nil && o.Retryable != nil {
		return true
	}

	return false
}

// SetRetryable gets a reference to the given bool and assigns it to the Retryable field.
func (o *AttemptFailureReason) SetRetryable(v bool) {
	o.Retryable = &v
}

// GetTimestamp returns the Timestamp field value
func (o *AttemptFailureReason) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *AttemptFailureReason) GetTimestampOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *AttemptFailureReason) SetTimestamp(v int64) {
	o.Timestamp = v
}

func (o AttemptFailureReason) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FailureOrigin != nil {
		toSerialize["failureOrigin"] = o.FailureOrigin
	}
	if o.FailureType != nil {
		toSerialize["failureType"] = o.FailureType
	}
	if o.ExternalMessage != nil {
		toSerialize["externalMessage"] = o.ExternalMessage
	}
	if o.Stacktrace != nil {
		toSerialize["stacktrace"] = o.Stacktrace
	}
	if o.Retryable != nil {
		toSerialize["retryable"] = o.Retryable
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableAttemptFailureReason struct {
	value *AttemptFailureReason
	isSet bool
}

func (v NullableAttemptFailureReason) Get() *AttemptFailureReason {
	return v.value
}

func (v *NullableAttemptFailureReason) Set(val *AttemptFailureReason) {
	v.value = val
	v.isSet = true
}

func (v NullableAttemptFailureReason) IsSet() bool {
	return v.isSet
}

func (v *NullableAttemptFailureReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttemptFailureReason(val *AttemptFailureReason) *NullableAttemptFailureReason {
	return &NullableAttemptFailureReason{value: val, isSet: true}
}

func (v NullableAttemptFailureReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttemptFailureReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


