/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte

import (
	"encoding/json"
)

// SourceDiscoverSchemaRead Returns the results of a discover catalog job. If the job was not successful, the catalog field will not be present. jobInfo will aways be present and its status be used to determine if the job was successful or not.
type SourceDiscoverSchemaRead struct {
	Catalog *AirbyteCatalog `json:"catalog,omitempty"`
	JobInfo SynchronousJobRead `json:"jobInfo"`
}

// NewSourceDiscoverSchemaRead instantiates a new SourceDiscoverSchemaRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceDiscoverSchemaRead(jobInfo SynchronousJobRead) *SourceDiscoverSchemaRead {
	this := SourceDiscoverSchemaRead{}
	this.JobInfo = jobInfo
	return &this
}

// NewSourceDiscoverSchemaReadWithDefaults instantiates a new SourceDiscoverSchemaRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceDiscoverSchemaReadWithDefaults() *SourceDiscoverSchemaRead {
	this := SourceDiscoverSchemaRead{}
	return &this
}

// GetCatalog returns the Catalog field value if set, zero value otherwise.
func (o *SourceDiscoverSchemaRead) GetCatalog() AirbyteCatalog {
	if o == nil || o.Catalog == nil {
		var ret AirbyteCatalog
		return ret
	}
	return *o.Catalog
}

// GetCatalogOk returns a tuple with the Catalog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceDiscoverSchemaRead) GetCatalogOk() (*AirbyteCatalog, bool) {
	if o == nil || o.Catalog == nil {
		return nil, false
	}
	return o.Catalog, true
}

// HasCatalog returns a boolean if a field has been set.
func (o *SourceDiscoverSchemaRead) HasCatalog() bool {
	if o != nil && o.Catalog != nil {
		return true
	}

	return false
}

// SetCatalog gets a reference to the given AirbyteCatalog and assigns it to the Catalog field.
func (o *SourceDiscoverSchemaRead) SetCatalog(v AirbyteCatalog) {
	o.Catalog = &v
}

// GetJobInfo returns the JobInfo field value
func (o *SourceDiscoverSchemaRead) GetJobInfo() SynchronousJobRead {
	if o == nil {
		var ret SynchronousJobRead
		return ret
	}

	return o.JobInfo
}

// GetJobInfoOk returns a tuple with the JobInfo field value
// and a boolean to check if the value has been set.
func (o *SourceDiscoverSchemaRead) GetJobInfoOk() (*SynchronousJobRead, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.JobInfo, true
}

// SetJobInfo sets field value
func (o *SourceDiscoverSchemaRead) SetJobInfo(v SynchronousJobRead) {
	o.JobInfo = v
}

func (o SourceDiscoverSchemaRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Catalog != nil {
		toSerialize["catalog"] = o.Catalog
	}
	if true {
		toSerialize["jobInfo"] = o.JobInfo
	}
	return json.Marshal(toSerialize)
}

type NullableSourceDiscoverSchemaRead struct {
	value *SourceDiscoverSchemaRead
	isSet bool
}

func (v NullableSourceDiscoverSchemaRead) Get() *SourceDiscoverSchemaRead {
	return v.value
}

func (v *NullableSourceDiscoverSchemaRead) Set(val *SourceDiscoverSchemaRead) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceDiscoverSchemaRead) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceDiscoverSchemaRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceDiscoverSchemaRead(val *SourceDiscoverSchemaRead) *NullableSourceDiscoverSchemaRead {
	return &NullableSourceDiscoverSchemaRead{value: val, isSet: true}
}

func (v NullableSourceDiscoverSchemaRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceDiscoverSchemaRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


