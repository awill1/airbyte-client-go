/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte

import (
	"encoding/json"
)

// AirbyteStreamConfiguration the mutable part of the stream to configure the destination
type AirbyteStreamConfiguration struct {
	SyncMode SyncMode `json:"syncMode"`
	// Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental`. Otherwise it is ignored.
	CursorField []string `json:"cursorField,omitempty"`
	DestinationSyncMode DestinationSyncMode `json:"destinationSyncMode"`
	// Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup`. Otherwise it is ignored.
	PrimaryKey [][]string `json:"primaryKey,omitempty"`
	// Alias name to the stream to be used in the destination
	AliasName *string `json:"aliasName,omitempty"`
	Selected *bool `json:"selected,omitempty"`
}

// NewAirbyteStreamConfiguration instantiates a new AirbyteStreamConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAirbyteStreamConfiguration(syncMode SyncMode, destinationSyncMode DestinationSyncMode) *AirbyteStreamConfiguration {
	this := AirbyteStreamConfiguration{}
	this.SyncMode = syncMode
	this.DestinationSyncMode = destinationSyncMode
	return &this
}

// NewAirbyteStreamConfigurationWithDefaults instantiates a new AirbyteStreamConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAirbyteStreamConfigurationWithDefaults() *AirbyteStreamConfiguration {
	this := AirbyteStreamConfiguration{}
	return &this
}

// GetSyncMode returns the SyncMode field value
func (o *AirbyteStreamConfiguration) GetSyncMode() SyncMode {
	if o == nil {
		var ret SyncMode
		return ret
	}

	return o.SyncMode
}

// GetSyncModeOk returns a tuple with the SyncMode field value
// and a boolean to check if the value has been set.
func (o *AirbyteStreamConfiguration) GetSyncModeOk() (*SyncMode, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SyncMode, true
}

// SetSyncMode sets field value
func (o *AirbyteStreamConfiguration) SetSyncMode(v SyncMode) {
	o.SyncMode = v
}

// GetCursorField returns the CursorField field value if set, zero value otherwise.
func (o *AirbyteStreamConfiguration) GetCursorField() []string {
	if o == nil || o.CursorField == nil {
		var ret []string
		return ret
	}
	return o.CursorField
}

// GetCursorFieldOk returns a tuple with the CursorField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirbyteStreamConfiguration) GetCursorFieldOk() ([]string, bool) {
	if o == nil || o.CursorField == nil {
		return nil, false
	}
	return o.CursorField, true
}

// HasCursorField returns a boolean if a field has been set.
func (o *AirbyteStreamConfiguration) HasCursorField() bool {
	if o != nil && o.CursorField != nil {
		return true
	}

	return false
}

// SetCursorField gets a reference to the given []string and assigns it to the CursorField field.
func (o *AirbyteStreamConfiguration) SetCursorField(v []string) {
	o.CursorField = v
}

// GetDestinationSyncMode returns the DestinationSyncMode field value
func (o *AirbyteStreamConfiguration) GetDestinationSyncMode() DestinationSyncMode {
	if o == nil {
		var ret DestinationSyncMode
		return ret
	}

	return o.DestinationSyncMode
}

// GetDestinationSyncModeOk returns a tuple with the DestinationSyncMode field value
// and a boolean to check if the value has been set.
func (o *AirbyteStreamConfiguration) GetDestinationSyncModeOk() (*DestinationSyncMode, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DestinationSyncMode, true
}

// SetDestinationSyncMode sets field value
func (o *AirbyteStreamConfiguration) SetDestinationSyncMode(v DestinationSyncMode) {
	o.DestinationSyncMode = v
}

// GetPrimaryKey returns the PrimaryKey field value if set, zero value otherwise.
func (o *AirbyteStreamConfiguration) GetPrimaryKey() [][]string {
	if o == nil || o.PrimaryKey == nil {
		var ret [][]string
		return ret
	}
	return o.PrimaryKey
}

// GetPrimaryKeyOk returns a tuple with the PrimaryKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirbyteStreamConfiguration) GetPrimaryKeyOk() ([][]string, bool) {
	if o == nil || o.PrimaryKey == nil {
		return nil, false
	}
	return o.PrimaryKey, true
}

// HasPrimaryKey returns a boolean if a field has been set.
func (o *AirbyteStreamConfiguration) HasPrimaryKey() bool {
	if o != nil && o.PrimaryKey != nil {
		return true
	}

	return false
}

// SetPrimaryKey gets a reference to the given [][]string and assigns it to the PrimaryKey field.
func (o *AirbyteStreamConfiguration) SetPrimaryKey(v [][]string) {
	o.PrimaryKey = v
}

// GetAliasName returns the AliasName field value if set, zero value otherwise.
func (o *AirbyteStreamConfiguration) GetAliasName() string {
	if o == nil || o.AliasName == nil {
		var ret string
		return ret
	}
	return *o.AliasName
}

// GetAliasNameOk returns a tuple with the AliasName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirbyteStreamConfiguration) GetAliasNameOk() (*string, bool) {
	if o == nil || o.AliasName == nil {
		return nil, false
	}
	return o.AliasName, true
}

// HasAliasName returns a boolean if a field has been set.
func (o *AirbyteStreamConfiguration) HasAliasName() bool {
	if o != nil && o.AliasName != nil {
		return true
	}

	return false
}

// SetAliasName gets a reference to the given string and assigns it to the AliasName field.
func (o *AirbyteStreamConfiguration) SetAliasName(v string) {
	o.AliasName = &v
}

// GetSelected returns the Selected field value if set, zero value otherwise.
func (o *AirbyteStreamConfiguration) GetSelected() bool {
	if o == nil || o.Selected == nil {
		var ret bool
		return ret
	}
	return *o.Selected
}

// GetSelectedOk returns a tuple with the Selected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirbyteStreamConfiguration) GetSelectedOk() (*bool, bool) {
	if o == nil || o.Selected == nil {
		return nil, false
	}
	return o.Selected, true
}

// HasSelected returns a boolean if a field has been set.
func (o *AirbyteStreamConfiguration) HasSelected() bool {
	if o != nil && o.Selected != nil {
		return true
	}

	return false
}

// SetSelected gets a reference to the given bool and assigns it to the Selected field.
func (o *AirbyteStreamConfiguration) SetSelected(v bool) {
	o.Selected = &v
}

func (o AirbyteStreamConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["syncMode"] = o.SyncMode
	}
	if o.CursorField != nil {
		toSerialize["cursorField"] = o.CursorField
	}
	if true {
		toSerialize["destinationSyncMode"] = o.DestinationSyncMode
	}
	if o.PrimaryKey != nil {
		toSerialize["primaryKey"] = o.PrimaryKey
	}
	if o.AliasName != nil {
		toSerialize["aliasName"] = o.AliasName
	}
	if o.Selected != nil {
		toSerialize["selected"] = o.Selected
	}
	return json.Marshal(toSerialize)
}

type NullableAirbyteStreamConfiguration struct {
	value *AirbyteStreamConfiguration
	isSet bool
}

func (v NullableAirbyteStreamConfiguration) Get() *AirbyteStreamConfiguration {
	return v.value
}

func (v *NullableAirbyteStreamConfiguration) Set(val *AirbyteStreamConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableAirbyteStreamConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableAirbyteStreamConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAirbyteStreamConfiguration(val *AirbyteStreamConfiguration) *NullableAirbyteStreamConfiguration {
	return &NullableAirbyteStreamConfiguration{value: val, isSet: true}
}

func (v NullableAirbyteStreamConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAirbyteStreamConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


