/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte

import (
	"encoding/json"
)

// DestinationDefinitionSpecificationRead struct for DestinationDefinitionSpecificationRead
type DestinationDefinitionSpecificationRead struct {
	DestinationDefinitionId string `json:"destinationDefinitionId"`
	DocumentationUrl *string `json:"documentationUrl,omitempty"`
	// The specification for what values are required to configure the destinationDefinition.
	ConnectionSpecification interface{} `json:"connectionSpecification,omitempty"`
	AuthSpecification *AuthSpecification `json:"authSpecification,omitempty"`
	AdvancedAuth *AdvancedAuth `json:"advancedAuth,omitempty"`
	JobInfo SynchronousJobRead `json:"jobInfo"`
	SupportedDestinationSyncModes []DestinationSyncMode `json:"supportedDestinationSyncModes,omitempty"`
	SupportsDbt *bool `json:"supportsDbt,omitempty"`
	SupportsNormalization *bool `json:"supportsNormalization,omitempty"`
}

// NewDestinationDefinitionSpecificationRead instantiates a new DestinationDefinitionSpecificationRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationDefinitionSpecificationRead(destinationDefinitionId string, jobInfo SynchronousJobRead) *DestinationDefinitionSpecificationRead {
	this := DestinationDefinitionSpecificationRead{}
	this.DestinationDefinitionId = destinationDefinitionId
	this.JobInfo = jobInfo
	return &this
}

// NewDestinationDefinitionSpecificationReadWithDefaults instantiates a new DestinationDefinitionSpecificationRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationDefinitionSpecificationReadWithDefaults() *DestinationDefinitionSpecificationRead {
	this := DestinationDefinitionSpecificationRead{}
	return &this
}

// GetDestinationDefinitionId returns the DestinationDefinitionId field value
func (o *DestinationDefinitionSpecificationRead) GetDestinationDefinitionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationDefinitionId
}

// GetDestinationDefinitionIdOk returns a tuple with the DestinationDefinitionId field value
// and a boolean to check if the value has been set.
func (o *DestinationDefinitionSpecificationRead) GetDestinationDefinitionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DestinationDefinitionId, true
}

// SetDestinationDefinitionId sets field value
func (o *DestinationDefinitionSpecificationRead) SetDestinationDefinitionId(v string) {
	o.DestinationDefinitionId = v
}

// GetDocumentationUrl returns the DocumentationUrl field value if set, zero value otherwise.
func (o *DestinationDefinitionSpecificationRead) GetDocumentationUrl() string {
	if o == nil || o.DocumentationUrl == nil {
		var ret string
		return ret
	}
	return *o.DocumentationUrl
}

// GetDocumentationUrlOk returns a tuple with the DocumentationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationDefinitionSpecificationRead) GetDocumentationUrlOk() (*string, bool) {
	if o == nil || o.DocumentationUrl == nil {
		return nil, false
	}
	return o.DocumentationUrl, true
}

// HasDocumentationUrl returns a boolean if a field has been set.
func (o *DestinationDefinitionSpecificationRead) HasDocumentationUrl() bool {
	if o != nil && o.DocumentationUrl != nil {
		return true
	}

	return false
}

// SetDocumentationUrl gets a reference to the given string and assigns it to the DocumentationUrl field.
func (o *DestinationDefinitionSpecificationRead) SetDocumentationUrl(v string) {
	o.DocumentationUrl = &v
}

// GetConnectionSpecification returns the ConnectionSpecification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DestinationDefinitionSpecificationRead) GetConnectionSpecification() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.ConnectionSpecification
}

// GetConnectionSpecificationOk returns a tuple with the ConnectionSpecification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DestinationDefinitionSpecificationRead) GetConnectionSpecificationOk() (*interface{}, bool) {
	if o == nil || o.ConnectionSpecification == nil {
		return nil, false
	}
	return &o.ConnectionSpecification, true
}

// HasConnectionSpecification returns a boolean if a field has been set.
func (o *DestinationDefinitionSpecificationRead) HasConnectionSpecification() bool {
	if o != nil && o.ConnectionSpecification != nil {
		return true
	}

	return false
}

// SetConnectionSpecification gets a reference to the given interface{} and assigns it to the ConnectionSpecification field.
func (o *DestinationDefinitionSpecificationRead) SetConnectionSpecification(v interface{}) {
	o.ConnectionSpecification = v
}

// GetAuthSpecification returns the AuthSpecification field value if set, zero value otherwise.
func (o *DestinationDefinitionSpecificationRead) GetAuthSpecification() AuthSpecification {
	if o == nil || o.AuthSpecification == nil {
		var ret AuthSpecification
		return ret
	}
	return *o.AuthSpecification
}

// GetAuthSpecificationOk returns a tuple with the AuthSpecification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationDefinitionSpecificationRead) GetAuthSpecificationOk() (*AuthSpecification, bool) {
	if o == nil || o.AuthSpecification == nil {
		return nil, false
	}
	return o.AuthSpecification, true
}

// HasAuthSpecification returns a boolean if a field has been set.
func (o *DestinationDefinitionSpecificationRead) HasAuthSpecification() bool {
	if o != nil && o.AuthSpecification != nil {
		return true
	}

	return false
}

// SetAuthSpecification gets a reference to the given AuthSpecification and assigns it to the AuthSpecification field.
func (o *DestinationDefinitionSpecificationRead) SetAuthSpecification(v AuthSpecification) {
	o.AuthSpecification = &v
}

// GetAdvancedAuth returns the AdvancedAuth field value if set, zero value otherwise.
func (o *DestinationDefinitionSpecificationRead) GetAdvancedAuth() AdvancedAuth {
	if o == nil || o.AdvancedAuth == nil {
		var ret AdvancedAuth
		return ret
	}
	return *o.AdvancedAuth
}

// GetAdvancedAuthOk returns a tuple with the AdvancedAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationDefinitionSpecificationRead) GetAdvancedAuthOk() (*AdvancedAuth, bool) {
	if o == nil || o.AdvancedAuth == nil {
		return nil, false
	}
	return o.AdvancedAuth, true
}

// HasAdvancedAuth returns a boolean if a field has been set.
func (o *DestinationDefinitionSpecificationRead) HasAdvancedAuth() bool {
	if o != nil && o.AdvancedAuth != nil {
		return true
	}

	return false
}

// SetAdvancedAuth gets a reference to the given AdvancedAuth and assigns it to the AdvancedAuth field.
func (o *DestinationDefinitionSpecificationRead) SetAdvancedAuth(v AdvancedAuth) {
	o.AdvancedAuth = &v
}

// GetJobInfo returns the JobInfo field value
func (o *DestinationDefinitionSpecificationRead) GetJobInfo() SynchronousJobRead {
	if o == nil {
		var ret SynchronousJobRead
		return ret
	}

	return o.JobInfo
}

// GetJobInfoOk returns a tuple with the JobInfo field value
// and a boolean to check if the value has been set.
func (o *DestinationDefinitionSpecificationRead) GetJobInfoOk() (*SynchronousJobRead, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.JobInfo, true
}

// SetJobInfo sets field value
func (o *DestinationDefinitionSpecificationRead) SetJobInfo(v SynchronousJobRead) {
	o.JobInfo = v
}

// GetSupportedDestinationSyncModes returns the SupportedDestinationSyncModes field value if set, zero value otherwise.
func (o *DestinationDefinitionSpecificationRead) GetSupportedDestinationSyncModes() []DestinationSyncMode {
	if o == nil || o.SupportedDestinationSyncModes == nil {
		var ret []DestinationSyncMode
		return ret
	}
	return o.SupportedDestinationSyncModes
}

// GetSupportedDestinationSyncModesOk returns a tuple with the SupportedDestinationSyncModes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationDefinitionSpecificationRead) GetSupportedDestinationSyncModesOk() ([]DestinationSyncMode, bool) {
	if o == nil || o.SupportedDestinationSyncModes == nil {
		return nil, false
	}
	return o.SupportedDestinationSyncModes, true
}

// HasSupportedDestinationSyncModes returns a boolean if a field has been set.
func (o *DestinationDefinitionSpecificationRead) HasSupportedDestinationSyncModes() bool {
	if o != nil && o.SupportedDestinationSyncModes != nil {
		return true
	}

	return false
}

// SetSupportedDestinationSyncModes gets a reference to the given []DestinationSyncMode and assigns it to the SupportedDestinationSyncModes field.
func (o *DestinationDefinitionSpecificationRead) SetSupportedDestinationSyncModes(v []DestinationSyncMode) {
	o.SupportedDestinationSyncModes = v
}

// GetSupportsDbt returns the SupportsDbt field value if set, zero value otherwise.
func (o *DestinationDefinitionSpecificationRead) GetSupportsDbt() bool {
	if o == nil || o.SupportsDbt == nil {
		var ret bool
		return ret
	}
	return *o.SupportsDbt
}

// GetSupportsDbtOk returns a tuple with the SupportsDbt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationDefinitionSpecificationRead) GetSupportsDbtOk() (*bool, bool) {
	if o == nil || o.SupportsDbt == nil {
		return nil, false
	}
	return o.SupportsDbt, true
}

// HasSupportsDbt returns a boolean if a field has been set.
func (o *DestinationDefinitionSpecificationRead) HasSupportsDbt() bool {
	if o != nil && o.SupportsDbt != nil {
		return true
	}

	return false
}

// SetSupportsDbt gets a reference to the given bool and assigns it to the SupportsDbt field.
func (o *DestinationDefinitionSpecificationRead) SetSupportsDbt(v bool) {
	o.SupportsDbt = &v
}

// GetSupportsNormalization returns the SupportsNormalization field value if set, zero value otherwise.
func (o *DestinationDefinitionSpecificationRead) GetSupportsNormalization() bool {
	if o == nil || o.SupportsNormalization == nil {
		var ret bool
		return ret
	}
	return *o.SupportsNormalization
}

// GetSupportsNormalizationOk returns a tuple with the SupportsNormalization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationDefinitionSpecificationRead) GetSupportsNormalizationOk() (*bool, bool) {
	if o == nil || o.SupportsNormalization == nil {
		return nil, false
	}
	return o.SupportsNormalization, true
}

// HasSupportsNormalization returns a boolean if a field has been set.
func (o *DestinationDefinitionSpecificationRead) HasSupportsNormalization() bool {
	if o != nil && o.SupportsNormalization != nil {
		return true
	}

	return false
}

// SetSupportsNormalization gets a reference to the given bool and assigns it to the SupportsNormalization field.
func (o *DestinationDefinitionSpecificationRead) SetSupportsNormalization(v bool) {
	o.SupportsNormalization = &v
}

func (o DestinationDefinitionSpecificationRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["destinationDefinitionId"] = o.DestinationDefinitionId
	}
	if o.DocumentationUrl != nil {
		toSerialize["documentationUrl"] = o.DocumentationUrl
	}
	if o.ConnectionSpecification != nil {
		toSerialize["connectionSpecification"] = o.ConnectionSpecification
	}
	if o.AuthSpecification != nil {
		toSerialize["authSpecification"] = o.AuthSpecification
	}
	if o.AdvancedAuth != nil {
		toSerialize["advancedAuth"] = o.AdvancedAuth
	}
	if true {
		toSerialize["jobInfo"] = o.JobInfo
	}
	if o.SupportedDestinationSyncModes != nil {
		toSerialize["supportedDestinationSyncModes"] = o.SupportedDestinationSyncModes
	}
	if o.SupportsDbt != nil {
		toSerialize["supportsDbt"] = o.SupportsDbt
	}
	if o.SupportsNormalization != nil {
		toSerialize["supportsNormalization"] = o.SupportsNormalization
	}
	return json.Marshal(toSerialize)
}

type NullableDestinationDefinitionSpecificationRead struct {
	value *DestinationDefinitionSpecificationRead
	isSet bool
}

func (v NullableDestinationDefinitionSpecificationRead) Get() *DestinationDefinitionSpecificationRead {
	return v.value
}

func (v *NullableDestinationDefinitionSpecificationRead) Set(val *DestinationDefinitionSpecificationRead) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationDefinitionSpecificationRead) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationDefinitionSpecificationRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationDefinitionSpecificationRead(val *DestinationDefinitionSpecificationRead) *NullableDestinationDefinitionSpecificationRead {
	return &NullableDestinationDefinitionSpecificationRead{value: val, isSet: true}
}

func (v NullableDestinationDefinitionSpecificationRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationDefinitionSpecificationRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


