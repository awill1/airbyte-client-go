/*
Airbyte Configuration API

Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility. 

API version: 1.0.0
Contact: contact@airbyte.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package airbyte

import (
	"encoding/json"
)

// DbMigrationRead struct for DbMigrationRead
type DbMigrationRead struct {
	MigrationType string `json:"migrationType"`
	MigrationVersion string `json:"migrationVersion"`
	MigrationDescription string `json:"migrationDescription"`
	MigrationState *DbMigrationState `json:"migrationState,omitempty"`
	MigratedBy *string `json:"migratedBy,omitempty"`
	MigratedAt *int64 `json:"migratedAt,omitempty"`
	MigrationScript *string `json:"migrationScript,omitempty"`
}

// NewDbMigrationRead instantiates a new DbMigrationRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbMigrationRead(migrationType string, migrationVersion string, migrationDescription string) *DbMigrationRead {
	this := DbMigrationRead{}
	this.MigrationType = migrationType
	this.MigrationVersion = migrationVersion
	this.MigrationDescription = migrationDescription
	return &this
}

// NewDbMigrationReadWithDefaults instantiates a new DbMigrationRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbMigrationReadWithDefaults() *DbMigrationRead {
	this := DbMigrationRead{}
	return &this
}

// GetMigrationType returns the MigrationType field value
func (o *DbMigrationRead) GetMigrationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MigrationType
}

// GetMigrationTypeOk returns a tuple with the MigrationType field value
// and a boolean to check if the value has been set.
func (o *DbMigrationRead) GetMigrationTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MigrationType, true
}

// SetMigrationType sets field value
func (o *DbMigrationRead) SetMigrationType(v string) {
	o.MigrationType = v
}

// GetMigrationVersion returns the MigrationVersion field value
func (o *DbMigrationRead) GetMigrationVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MigrationVersion
}

// GetMigrationVersionOk returns a tuple with the MigrationVersion field value
// and a boolean to check if the value has been set.
func (o *DbMigrationRead) GetMigrationVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MigrationVersion, true
}

// SetMigrationVersion sets field value
func (o *DbMigrationRead) SetMigrationVersion(v string) {
	o.MigrationVersion = v
}

// GetMigrationDescription returns the MigrationDescription field value
func (o *DbMigrationRead) GetMigrationDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MigrationDescription
}

// GetMigrationDescriptionOk returns a tuple with the MigrationDescription field value
// and a boolean to check if the value has been set.
func (o *DbMigrationRead) GetMigrationDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MigrationDescription, true
}

// SetMigrationDescription sets field value
func (o *DbMigrationRead) SetMigrationDescription(v string) {
	o.MigrationDescription = v
}

// GetMigrationState returns the MigrationState field value if set, zero value otherwise.
func (o *DbMigrationRead) GetMigrationState() DbMigrationState {
	if o == nil || o.MigrationState == nil {
		var ret DbMigrationState
		return ret
	}
	return *o.MigrationState
}

// GetMigrationStateOk returns a tuple with the MigrationState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbMigrationRead) GetMigrationStateOk() (*DbMigrationState, bool) {
	if o == nil || o.MigrationState == nil {
		return nil, false
	}
	return o.MigrationState, true
}

// HasMigrationState returns a boolean if a field has been set.
func (o *DbMigrationRead) HasMigrationState() bool {
	if o != nil && o.MigrationState != nil {
		return true
	}

	return false
}

// SetMigrationState gets a reference to the given DbMigrationState and assigns it to the MigrationState field.
func (o *DbMigrationRead) SetMigrationState(v DbMigrationState) {
	o.MigrationState = &v
}

// GetMigratedBy returns the MigratedBy field value if set, zero value otherwise.
func (o *DbMigrationRead) GetMigratedBy() string {
	if o == nil || o.MigratedBy == nil {
		var ret string
		return ret
	}
	return *o.MigratedBy
}

// GetMigratedByOk returns a tuple with the MigratedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbMigrationRead) GetMigratedByOk() (*string, bool) {
	if o == nil || o.MigratedBy == nil {
		return nil, false
	}
	return o.MigratedBy, true
}

// HasMigratedBy returns a boolean if a field has been set.
func (o *DbMigrationRead) HasMigratedBy() bool {
	if o != nil && o.MigratedBy != nil {
		return true
	}

	return false
}

// SetMigratedBy gets a reference to the given string and assigns it to the MigratedBy field.
func (o *DbMigrationRead) SetMigratedBy(v string) {
	o.MigratedBy = &v
}

// GetMigratedAt returns the MigratedAt field value if set, zero value otherwise.
func (o *DbMigrationRead) GetMigratedAt() int64 {
	if o == nil || o.MigratedAt == nil {
		var ret int64
		return ret
	}
	return *o.MigratedAt
}

// GetMigratedAtOk returns a tuple with the MigratedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbMigrationRead) GetMigratedAtOk() (*int64, bool) {
	if o == nil || o.MigratedAt == nil {
		return nil, false
	}
	return o.MigratedAt, true
}

// HasMigratedAt returns a boolean if a field has been set.
func (o *DbMigrationRead) HasMigratedAt() bool {
	if o != nil && o.MigratedAt != nil {
		return true
	}

	return false
}

// SetMigratedAt gets a reference to the given int64 and assigns it to the MigratedAt field.
func (o *DbMigrationRead) SetMigratedAt(v int64) {
	o.MigratedAt = &v
}

// GetMigrationScript returns the MigrationScript field value if set, zero value otherwise.
func (o *DbMigrationRead) GetMigrationScript() string {
	if o == nil || o.MigrationScript == nil {
		var ret string
		return ret
	}
	return *o.MigrationScript
}

// GetMigrationScriptOk returns a tuple with the MigrationScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbMigrationRead) GetMigrationScriptOk() (*string, bool) {
	if o == nil || o.MigrationScript == nil {
		return nil, false
	}
	return o.MigrationScript, true
}

// HasMigrationScript returns a boolean if a field has been set.
func (o *DbMigrationRead) HasMigrationScript() bool {
	if o != nil && o.MigrationScript != nil {
		return true
	}

	return false
}

// SetMigrationScript gets a reference to the given string and assigns it to the MigrationScript field.
func (o *DbMigrationRead) SetMigrationScript(v string) {
	o.MigrationScript = &v
}

func (o DbMigrationRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["migrationType"] = o.MigrationType
	}
	if true {
		toSerialize["migrationVersion"] = o.MigrationVersion
	}
	if true {
		toSerialize["migrationDescription"] = o.MigrationDescription
	}
	if o.MigrationState != nil {
		toSerialize["migrationState"] = o.MigrationState
	}
	if o.MigratedBy != nil {
		toSerialize["migratedBy"] = o.MigratedBy
	}
	if o.MigratedAt != nil {
		toSerialize["migratedAt"] = o.MigratedAt
	}
	if o.MigrationScript != nil {
		toSerialize["migrationScript"] = o.MigrationScript
	}
	return json.Marshal(toSerialize)
}

type NullableDbMigrationRead struct {
	value *DbMigrationRead
	isSet bool
}

func (v NullableDbMigrationRead) Get() *DbMigrationRead {
	return v.value
}

func (v *NullableDbMigrationRead) Set(val *DbMigrationRead) {
	v.value = val
	v.isSet = true
}

func (v NullableDbMigrationRead) IsSet() bool {
	return v.isSet
}

func (v *NullableDbMigrationRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbMigrationRead(val *DbMigrationRead) *NullableDbMigrationRead {
	return &NullableDbMigrationRead{value: val, isSet: true}
}

func (v NullableDbMigrationRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbMigrationRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


